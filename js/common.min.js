var ELEMENTS = {
    'armchair_333' : {
        'id' : 'img_armchair_333',
        'title': 'Кресло 333',
        'src': './img/elements/armchair_333.png',
        'width' : '128',
        'height': '130',
        'cost' : '3000',
        'maxCount' : '2'
     },
     'armchair_yellow_333' : {
        'id' : 'img_armchair_yellow_333',
        'title': 'Желтое кресло 333',
        'src': './img/elements/armchair_yellow_333.png',
        'width' : '128',
        'height': '130',
        'cost' : '3200',
        'maxCount' : '2'
     },
     'chair_300' : {
        'id' : 'img_chair_300',
        'title': 'Стул 300',
        'src': './img/elements/chair_300.png',
        'width' : '82',
        'height': '83',
        'cost' : '1500',
        'maxCount' : '3'
     },
     'chair_303' : {
        'id' : 'img_chair_303',
        'title': 'Стул 303',
        'src': './img/elements/chair_303.png',
        'width' : '82',
        'height': '80',
        'cost' : '1200',
        'maxCount' : '3'
     },
     'chair_305' : {
        'id' : 'img_chair_305',
        'title': 'Стул 305',
        'src': './img/elements/chair_305.png',
        'width' : '84',
        'height': '77',
        'cost' : '1200',
        'maxCount' : '3'
     },
     'chair_buk' : {
        'id' : 'img_chair_buk',
        'title': 'Стул Бук',
        'src': './img/elements/chair_buk.png',
        'width' : '83',
        'height': '75',
        'cost' : '2800',
        'maxCount' : '2'
     },
     'chair_ergo_303' : {
        'id' : 'img_chair_ergo_303',
        'title': 'Стул Ergonica 303',
        'src': './img/elements/chair_ergo_303.png',
        'width' : '81',
        'height': '82',
        'cost' : '2400',
        'maxCount' : '2'
     },
     'chair_pl_300' : {
        'id' : 'img_chair_pl_300',
        'title': 'Стул пластик 300',
        'src': './img/elements/chair_pl_300.png',
        'width' : '82',
        'height': '81',
        'cost' : '1500',
        'maxCount' : '3'
     },
     'circle_306' : {
        'id' : 'img_circle_306',
        'title': 'Витрина 306',
        'src': './img/elements/circle_306.png',
        'width' : '72',
        'height': '72',
        'cost' : '5200',
        'maxCount' : '2'
     },
     'glass_314' : {
        'id' : 'img_glass_314',
        'title': 'Витрина 314',
        'src': './img/elements/glass_314.png',
        'width' : '160',
        'height': '159',
        'cost' : '4000',
        'maxCount' : '2'
     },
     'sofa_334' : {
        'id' : 'img_sofa_334',
        'title': 'Диван 334',
        'src': './img/elements/sofa_334.png',
        'width' : '241',
        'height': '134',
        'cost' : '6200',
        'maxCount' : '1'
     },
     'sofa_yellow_334' : {
        'id' : 'img_sofa_yellow_334',
        'title': 'Желтый Диван 334',
        'src': './img/elements/sofa_yellow_334.png',
        'width' : '241',
        'height': '135',
        'cost' : '6000',
        'maxCount' : '1'
     },
     'table_335' : {
        'id' : 'img_table_335',
        'title': 'Стол 335',
        'src': './img/elements/table_335.png',
        'width' : '214',
        'height': '120',
        'cost' : '4200',
        'maxCount' : '2'
     },
     'table_336' : {
        'id' : 'img_table_336',
        'title': 'Стол 336',
        'src': './img/elements/table_336.png',
        'width' : '158',
        'height': '148',
        'cost' : '6500',
        'maxCount' : '2'
     },
     'table_800' : {
        'id' : 'img_table_800',
        'title': 'Стол 800',
        'src': './img/elements/table_800.png',
        'width' : '187',
        'height': '126',
        'cost' : '7000',
        'maxCount' : '1'
     },
     'table_bar' : {
        'id' : 'img_table_bar',
        'title': 'Стол барный',
        'src': './img/elements/table_bar.png',
        'width' : '160',
        'height': '157',
        'cost' : '8500',
        'maxCount' : '1'
     },
     'table_conference' : {
        'id' : 'img_table_conference',
        'title': 'Стол переговорный',
        'src': './img/elements/table_conference.png',
        'width' : '384',
        'height': '189',
        'cost' : '10000',
        'maxCount' : '1'
     }
}

$(function () {     

    var addListNode = function(parentEl, imgId, imgSrc, rectItemId, _rectText) {
        var INCLUDED_LIST = document.getElementById(parentEl);

        var listItem = document.createElement("li");
        var rect = document.createElement("span");
        var rectItem = document.createElement("span");
        var figureRect = document.createElement("span");
        var imgItem = document.createElement("img");
        var rectText = document.createElement("span");

        imgItem.setAttribute("id", imgId);
        imgItem.setAttribute("src", imgSrc);

        figureRect.appendChild(imgItem);
        figureRect.classList.add("figure-rect");

        rectItem.appendChild(figureRect);
        rectItem.setAttribute("id", rectItemId);
        rectItem.classList.add("rect-item");

        rect.appendChild(rectItem);
        rect.classList.add("rect");

        rectText.classList.add("rect-text");
        rectText.appendChild(document.createTextNode(_rectText));

        listItem.classList.add("list-item");
        listItem.appendChild(rect);
        listItem.appendChild(rectText);

        INCLUDED_LIST.appendChild(listItem);
    }

    for (key in ELEMENTS) {
        addListNode("included_list", ELEMENTS[key].id, ELEMENTS[key].src, key, ELEMENTS[key].title);
    }

    for (key in ELEMENTS) {
        addListNode("additional_list", ELEMENTS[key].id, ELEMENTS[key].src, key, ELEMENTS[key].title);
    }


    var canvas = new fabric.Canvas('canvas', { isDrawingMode: false });
    var canvasEl = $("#canvas");
    var total = $('#total');
    var count = $('#count');
    var rect = $(".rect");
    var deleteBtn = $("#delete");
    var saveBtn = $("#save");
    var uploadBtn = $("#upload");
    var closeBtn = $("#closeBtn");
    var windowPopup = $("#windowPopup");
    var windowMsg = $("#msg");
    var windowConfirmDelete = $("#confirmDelete");
    var windowConfirmDefault = $("#confirmDefault");
    var saveToJson = {
        canvas: '',
        total: '',
        count: ''
    };
    var elementsCount = 0;
    var elementsList = [];
    var addElementsID = [];
    var elementsCounter = [];
    var maxCountFlag = false;
    var grid = 165;
    var canvasHeight = grid * 3;
    var canvasWidth = grid * 4;
    var _mouseX, _mouseY, _json_type, json_rect;

    var URL = ''; // url for POST to back

    total.html(18000);
    count.html(elementsCount);

    windowPopup.css('display', 'none');
    windowConfirmDelete.css('display', 'none');
    windowConfirmDefault.css('display', 'none');

    fabric.Object.prototype.transparentCorners = false;
    canvas.setHeight(canvasHeight);
    canvas.setWidth(canvasWidth);
    canvas.selection = false;

    canvas.on('object:moving', function (e) {
        var obj = e.target;
        if(obj.currentHeight > obj.canvas.height || obj.currentWidth > obj.canvas.width){
            return;
        }        
        obj.setCoords();        
        if(obj.getBoundingRect().top < 0 || obj.getBoundingRect().left < 0){
            obj.top = Math.max(obj.top, obj.top-obj.getBoundingRect().top);
            obj.left = Math.max(obj.left, obj.left-obj.getBoundingRect().left);
        }
        if(obj.getBoundingRect().top+obj.getBoundingRect().height  > obj.canvas.height || obj.getBoundingRect().left+obj.getBoundingRect().width  > obj.canvas.width){
            obj.top = Math.min(obj.top, obj.canvas.height-obj.getBoundingRect().height+obj.top-obj.getBoundingRect().top);
            obj.left = Math.min(obj.left, obj.canvas.width-obj.getBoundingRect().width+obj.left-obj.getBoundingRect().left);
        }
    });

    for (key in ELEMENTS) {
        elementsCounter.push({
            'id': 'img_' + key,
            'maxCount': ELEMENTS[key].maxCount,
            'count':0
        })
    }

    rect.draggable({
        helper: "clone",
        appendTo: "body",
        revert: "invalid",
        snap: ".tapad",
        stack: ".rect",
        scroll: false
    });

    deleteBtn.click(function(e){
        e.preventDefault();
        canvas.isDrawingMode = false;
        windowConfirmDelete.css('display', 'block');
        windowMsg.html('Удалить элемент?');
        windowPopup.css('display', 'block');
    });

    saveBtn.click(function(e){
        e.preventDefault();
        canvas.isDrawingMode = false;
        saveObject();
    });

    uploadBtn.click(function(e){
        e.preventDefault();
        canvas.isDrawingMode = false;
        uploadObject();
    });

    closeBtn.click(function(e){
        e.preventDefault();
        windowPopup.css('display', 'none');
        windowConfirmDelete.css('display', 'none');
        windowConfirmDefault.css('display', 'none');
        windowMsg.html('');
    });

    windowConfirmDelete.click(function(e){
        e.preventDefault();
        canvas.isDrawingMode = false;
        deleteObject();
        windowPopup.css('display', 'none');
        windowConfirmDelete.css('display', 'none');
        windowMsg.html('');
    });

    windowConfirmDefault.click(function(e){
        e.preventDefault();
        canvas.isDrawingMode = false;
        windowPopup.css('display', 'none');
        windowConfirmDefault.css('display', 'none');
        windowMsg.html('');
    });

    //draw grid
    for (var i = 0; i < (canvasWidth / grid); i++) {
        canvas.add(new fabric.Line([ i * grid, 0, i * grid, canvasHeight], { type:'line', stroke: '#ccc', selectable: false }));
        canvas.add(new fabric.Line([ 0, i * grid, canvasWidth, i * grid], { type: 'line', stroke: '#ccc', selectable: false }))
    }

    canvasEl.droppable({
        cursor: "move",
        accept: ".rect",
        activeClass: "snaptarget-hover",
        drop: function (event, ui) {
            maxCountFlag = false;

            var pos = $("#dragBoard");
            var clonedObject = null;
            _mouseX = event.pageX - pos.position().left;
            _mouseY = event.pageY - pos.position().top;

            //add new image to canvas
            var addImg = function(el, _parentNode) {
                var _costValue

                if(_parentNode === 'included_list') {
                    _costValue = '0';
                } else {
                    _costValue = el.cost;
                }

                clonedObject = new fabric.Image(el.id, {
                    left: _mouseX,
                    top: _mouseY,
                    lockScalingX : true,
                    lockScalingY : true,
                    costValue: _costValue,
                    elementName: el.id
                });
                clonedObject.scaleToHeight(el.height / 1.11);
                clonedObject.scaleToWidth(el.width / 1.11);
                canvas.add(clonedObject);
                addCost(clonedObject.costValue);
                addToCounterArray(el.id);
            }

            var addToCounterArray = function(element) {
                for(var i = 0; i < elementsCounter.length; i++) {
                    if(elementsCounter[i].id == element) {
                        elementsCounter[i].count += 1;
                    }
                }
            }

            //add new element to canvas
            var addElement = function(el) {
                var parentNode = el[0].parentElement.parentElement.id;
                for (key in ELEMENTS) {
                    if(key === el.context.lastElementChild.id) {
                        addImg(ELEMENTS[key], parentNode);
                    } 
                }
            }

            for(var i = 0; i < elementsCounter.length; i++) {
                var arrElId = elementsCounter[i].id;
                var arrElCont = elementsCounter[i].count;
                var arrElIdMaxCount = elementsCounter[i].maxCount;
                var addElId = 'img_' + ui.draggable.context.lastElementChild.id;
                var windowMessage = arrElIdMaxCount > 1 ? ' элементов' : '-го элемента';

                if(addElId === arrElId && arrElCont >= arrElIdMaxCount) {
                    maxCountFlag = true;
                    windowMsg.html('Можно добавить не больше ' + arrElIdMaxCount + windowMessage );
                    windowConfirmDefault.css('display', 'block');
                    windowPopup.css('display', 'block');
                    return false;
                } else {
                    
                }
            }
            

            try{
                addElement(ui.draggable);
                //console.log(ui.draggable[0].parentElement.parentElement);
                var oldLeft = clonedObject.getLeft();
                var oldTop = clonedObject.getTop();
                clonedObject.setLeft(oldLeft - 20);
                clonedObject.setTop(oldTop - 20);

                var boundingRect = clonedObject.getBoundingRect(true);
                if (boundingRect.left + boundingRect.width > canvas.getWidth()) {
                    clonedObject.setLeft(oldLeft);
                }
                if (boundingRect.top + boundingRect.height > canvas.getHeight()) {
                    clonedObject.setTop(oldTop);
                }

                canvas.setActiveObject(clonedObject);
                canvas.renderAll();
            } catch(err) {
                if(!clonedObject || maxCountFlag) {
                    return false;
                }
            }
        }
    });

    function addCount() {
        elementsCount = elementsCount + 1
        count.html(elementsCount);
    }

    function removeCount() {
        elementsCount = elementsCount - 1
        count.html(elementsCount);
    }

    function addCost(value) {
        if(value === '' || value === undefined) {
            value = 0;
        }
        var cost = total.html();
        total.html(parseInt(cost) + parseInt(value));
    }

    function deleteObject(){
        var activeObject = canvas.getActiveObject();

        if (activeObject) {
            canvas.remove(activeObject);
            removeCount();
            if(activeObject.costValue > 0) {
                addCost(activeObject.costValue * -1);
            }

            for(var i = 0; i < elementsCounter.length; i++) {
                var arrElId = elementsCounter[i].id;
                var arrElCont = elementsCounter[i].count;
                var addElId = activeObject._element.id;

                if(addElId === arrElId) {
                    elementsCounter[i].count -= 1;
                    maxCountFlag = false;
                }
            }
        }
    }

    function saveObject() {
        var activeObject = canvas.getActiveObject();
        if(canvas._objects.length < 9) {
            windowMsg.html('Нужно сохранить объекты в канвасе.');
            windowConfirmDefault.css('display', 'block');
            windowPopup.css('display', 'block');
        } else {
            elementsList = canvas._objects;
            saveToJson.canvas = canvas.toJSON(['costValue', 'elementName']);
            saveToJson.total = total.html();
            saveToJson.count = count.html();
        }
    }

    function uploadObject() {
        if(saveToJson.canvas !== '') {
            canvas.loadFromJSON(saveToJson.canvas, canvas.renderAll.bind(canvas));
            total.html(saveToJson.total);
            elementsCount = parseInt(saveToJson.count);
            count.html(elementsCount);
            elementsCounter = [];
            for (key in ELEMENTS) {
                elementsCounter.push({
                    'id': 'img_' + key,
                    'maxCount': ELEMENTS[key].maxCount,
                    'count':0
                })
            }

            for(var i = 0; i < elementsCounter.length; i++) {
                for(var j = 0; j < saveToJson.canvas.objects.length; j++) {
                    if(saveToJson.canvas.objects[j].elementName) {
                        if(elementsCounter[i].id === saveToJson.canvas.objects[j].elementName) {
                            elementsCounter[i].count += 1;
                        }
                    }
                }        
            }
        } else {
            windowMsg.html('Нечего загружать, нужно сохранить объекты в канвасе.');
            windowConfirmDefault.css('display', 'block');
            windowPopup.css('display', 'block');
        }
    }

    function postToBack() {
        $.ajax({
            url: URL,
            type: "POST",
            data: saveToJson,
            dataType: dataType
        });
    }
});
